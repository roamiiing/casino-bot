import * as uuid from "https://deno.land/std@0.202.0/uuid/mod.ts";
import { Bot } from "https://deno.land/x/grammy@v1.19.2/mod.ts";
import { kv } from "../kv.ts";
import { getUserKey } from "../helpers.ts";
import { UserState } from "../types.ts";
import { CURRENT_KEY, DICE_COST } from "../constants.ts";
import { Message } from "https://deno.land/x/grammy_types@v3.3.0/message.ts";
import { locales } from "../locales.ts";

export const getCodeKey = (id: string) => [`${CURRENT_KEY}-code-treasure`, id];

export type Code = {
  active: true;
  issuedBy: number;
  messageId?: number;
  chatId?: number;
} | {
  active: false;
};

export default (bot: Bot) => {
  // bot.command("codegen", async (ctx) => {
  //   const userId = ctx.from?.id;

  //   if (!userId) return;

  //   const codeText = crypto.randomUUID();

  //   const code = await kv
  //     .set(getCodeKey(codeText), {
  //       active: true,
  //       issuedBy: userId,
  //     } as Code);

  //   return await ctx.reply(codeText);
  // });

  bot.command("redeem", async (ctx) => {
    if (ctx.chat.type !== "private") {
      return await ctx.reply(
        "–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫—Ä—É—Ç–∫—É —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏–≤ –º–Ω–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üòÑ",
      );
    }

    const codeText = ctx.message?.text.split(/\s+/)[1];

    if (!codeText || !uuid.validate(codeText)) {
      return await ctx.reply(`–ö–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω`);
    }

    const userId = ctx.from?.id;

    if (!userId) return;

    const code = await kv
      .get<Code>(getCodeKey(codeText))
      .then(
        (state): Code =>
          state.value ??
            {
              active: false,
            },
      );

    if (code.active) {
      if (code.issuedBy === userId) {
        return await ctx.reply(
          "–£–ø—Å, –∞ –≤–æ—Ç —Å–≤–æ–π –∫–æ–¥ –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –Ω–µ–ª—å–∑—è ü•≤",
        );
      }

      const userState = await kv
        .get<UserState>(getUserKey(userId))
        .then(
          (state) =>
            state.value ??
              undefined,
        );

      if (!userState) {
        return await ctx.reply(
          "–ü–æ–∫–∞ —Ç—ã –Ω–µ —Å–¥–µ–ª–∞–µ—à—å —Ö–æ—Ç—è –æ–¥–Ω—É –∫—Ä—É—Ç–∫—É - —Ç—ã –Ω–µ —Å–º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —á—É–∂–∏–º–∏ –∫–æ–¥–∞–º–∏ ü•≤",
        );
      }

      if (code.chatId && code.messageId) {
        bot.api.editMessageText(
          code.chatId,
          code.messageId,
          locales.freespinRedeemedQuote(),
          {
            parse_mode: "HTML",
          },
        );
      }

      const nextUserState: UserState = {
        ...userState,
        extraAttempts: (userState?.extraAttempts ?? 0) + 1,
        coins: userState.coins + DICE_COST,
      };

      await kv
        .atomic()
        .delete(getCodeKey(codeText))
        .set(
          getUserKey(userId),
          nextUserState,
        ).commit();

      return await ctx.reply(
        `–í–æ—Ç —ç—Ç–æ —Å–∫–æ—Ä–æ—Å—Ç—å! –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å –µ—â–µ –æ–¥–Ω–∞ –∫—Ä—É—Ç–∫–∞ (–∏ ${DICE_COST} –º–æ–Ω–µ—Ç), –æ–Ω–∞ –≤—ã–π–¥–µ—Ç –ø–æ—á—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è, –∏ –æ–Ω–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ –ø–æ UTC`,
      );
    }

    return await ctx.reply("–°–æ—Ä—Ä–∏, —ç—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∫—Ç–æ-—Ç–æ —É—Å–ø–µ–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ü§Ø");
  });
};

export const createFreespinCode = async (userId: number) => {
  const codeText = crypto.randomUUID();

  await kv
    .set(getCodeKey(codeText), {
      active: true,
      issuedBy: userId,
    } as Code);

  return codeText;
};

export const linkFreespinCode = async (
  code: string,
  message: Message.TextMessage,
) => {
  const codeState = await kv.get<Code>(getCodeKey(code)).then((state) =>
    state.value ?? undefined
  );

  if (!codeState || !codeState.active) return;

  await kv
    .set(getCodeKey(code), {
      ...codeState,
      messageId: message.message_id,
      chatId: message.chat.id,
    });
};
